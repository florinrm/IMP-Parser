/* The following code was generated by JFlex 1.4.3 on 03.01.2019, 20:44 */


import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.01.2019, 20:44 from the specification file
 * <tt>Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\23\2\0\1\24\23\0\1\14\4\0\1\15\1\0\1\30"+
    "\1\31\1\0\1\14\1\25\2\0\1\14\1\3\11\2\1\0\1\22"+
    "\1\0\1\14\1\14\42\0\1\11\3\1\1\7\1\10\1\1\1\20"+
    "\1\16\2\1\1\12\1\1\1\21\3\1\1\5\1\13\1\4\1\6"+
    "\1\1\1\17\3\1\1\26\1\0\1\27\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\3\2\1\4\1\1\2\2"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\3\2\1\4\5\2\1\14\1\2\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\32\0\150\0\202\0\234"+
    "\0\32\0\266\0\320\0\352\0\32\0\32\0\u0104\0\32"+
    "\0\32\0\32\0\32\0\32\0\u011e\0\u0138\0\u0152\0\64"+
    "\0\u016c\0\u0186\0\u01a0\0\u01ba\0\u01d4\0\64\0\u01ee\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\3\1\7\1\10"+
    "\3\3\1\11\1\12\1\13\1\14\2\3\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\33\0\1\3"+
    "\2\0\10\3\2\0\4\3\12\0\2\4\27\0\1\3"+
    "\2\0\1\3\1\25\6\3\2\0\4\3\11\0\1\3"+
    "\2\0\6\3\1\26\1\3\2\0\4\3\11\0\1\3"+
    "\2\0\5\3\1\27\2\3\2\0\4\3\25\0\1\11"+
    "\15\0\1\3\2\0\4\3\1\30\3\3\2\0\3\3"+
    "\1\31\11\0\1\3\2\0\10\3\2\0\2\3\1\32"+
    "\1\3\33\0\1\16\7\0\1\3\2\0\2\3\1\33"+
    "\5\3\2\0\4\3\11\0\1\3\2\0\7\3\1\34"+
    "\2\0\4\3\11\0\1\3\2\0\6\3\1\35\1\3"+
    "\2\0\4\3\11\0\1\3\2\0\1\36\7\3\2\0"+
    "\4\3\11\0\1\3\2\0\10\3\2\0\1\37\3\3"+
    "\11\0\1\3\2\0\3\3\1\40\4\3\2\0\4\3"+
    "\11\0\1\3\2\0\3\3\1\30\4\3\2\0\4\3"+
    "\11\0\1\3\2\0\7\3\1\33\2\0\4\3\11\0"+
    "\1\3\2\0\6\3\1\34\1\3\2\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\3\1\2\11"+
    "\1\1\5\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    Stack<Expression> stack = new Stack<>();
    // list of variables from program, in order to check what of them are initialized
    ArrayList<VarNode> variables = new ArrayList<>();
	public static HashMap<String, Expression> var_values = new HashMap<>();

    private static final String mainNode = "int";
    private static final String assignSign = "=";
    private static final String plusSign = "+";
    private static final String divSign = "/";
    private static final String ifStatement = "if";
    private static final String elseStatement = "else";
    private static final String whileStatement = "while";
    private static final String greaterSign = ">";
    private static final String andSign = "&&";
    private static final String notSign = "!";

	public boolean toIntepret = false;


    private boolean checkInstance() {
        return stack.peek() instanceof Symbol || stack.peek() instanceof VarNode
            || stack.peek() instanceof IntNode || stack.peek() instanceof PlusNode
            || stack.peek() instanceof DivNode || stack.peek() instanceof BracketNode;
    }

	private boolean checkCondition (Expression element) {
		if (element instanceof BracketNode) {
			BracketNode node = (BracketNode) element;
			return node.getChild() == null;
		}
		return false;
	}

    public Expression build() {
        Expression expr = null;
        for (;;) {
			if (!checkInstance())
				break;
            if (stack.peek() instanceof Symbol) {
                Symbol symbol = (Symbol) stack.peek();
					if (symbol.getSymbol().compareTo(mainNode) == 0)
						return stack.peek();
					else if (symbol.getSymbol().compareTo(assignSign) == 0) {
						stack.pop();

						VarNode muie_dragnea = (VarNode) stack.peek();
						muie_dragnea.setLine(Singleton.count);
						if (expr instanceof VarNode) {
							VarNode muie_viorica = (VarNode) expr;
							muie_viorica.setLine(Singleton.count);
							expr = new AssignmentNode(muie_dragnea, muie_viorica, Singleton.count);
						} else {
							expr = new AssignmentNode(muie_dragnea, expr, Singleton.count);
						}						
						AssignmentNode node = (AssignmentNode) expr;
						Expression variable = node.getVariable();
						Expression value = node.getValue();
						if (toIntepret) {
							if (variable instanceof VarNode) {
								VarNode temp = (VarNode) variable;
								System.out.println("Var name " + temp.getVarName());
								if (value instanceof VarNode) {
									VarNode aux = (VarNode) value;
									Singleton.getInstance().var_values.put(temp.getVarName(), Singleton.getInstance().var_values.get(aux.getVarName()));
								} else if (value instanceof IntNode || value instanceof BoolNode) {
									Singleton.getInstance().var_values.put(temp.getVarName(), value.interpret());
								} else if (value instanceof PlusNode || value instanceof DivNode) {
									//Singleton.getInstance().var_values.put(temp.getVarName(), value);
								}
							}
						}
						
						stack.pop();
						if (stack.peek() instanceof SequenceNode || stack.peek() instanceof BlockNode)
							return expr;
						else if (stack.peek() instanceof MainNode) {
							return new SequenceNode(expr);
						} else {
							stack.push(new SequenceNode(stack.pop()));
							return expr;
						}	
					}
					else if (symbol.getSymbol().compareTo(plusSign) == 0) {
						stack.pop();
						if(expr instanceof PlusNode) {
							PlusNode node = (PlusNode) expr;
                            PlusNode temp = new PlusNode(node.getFirstChild(), Singleton.count);
                            node.setFirstChild(temp);
                            expr = node;
						} else {
							expr = new PlusNode(expr, Singleton.count);
						}
					}
                }
                else if (expr instanceof PlusNode) {
					PlusNode node = (PlusNode) expr;
                    node.setFirstChild(stack.pop());
					expr = node;
                }
                else
                  	expr = stack.pop();
        	}
	    return expr;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { stack.push(new BoolNode(yytext()));
          }
        case 14: break;
        case 10: 
          { stack.push(new BracketNode());
          }
        case 15: break;
        case 12: 
          { stack.push(new Symbol(mainNode));
          }
        case 16: break;
        case 3: 
          { if (stack.peek() instanceof Symbol) {
        Symbol symbol = (Symbol) stack.peek();
        if (symbol.getSymbol().compareTo(divSign) != 0) {
			stack.push(new IntNode(yytext(), Singleton.count));
        } else {
            stack.pop();
            stack.push(new DivNode(stack.pop(), new IntNode(yytext(), Singleton.count), Singleton.count));
        }
    } else {
        stack.push(new IntNode(yytext(), Singleton.count));
    }
          }
        case 17: break;
        case 7: 
          { /* do nothing */
          }
        case 18: break;
        case 4: 
          { stack.push(new Symbol(yytext()));
          }
        case 19: break;
        case 2: 
          { if (stack.peek() instanceof Symbol) {
            Symbol symbol_stack = (Symbol) stack.peek();
            if (symbol_stack.getSymbol().compareTo(mainNode) == 0) {
				VarNode node = new VarNode(yytext());
				//System.out.println("declare " + node.getVarName());
				if (toIntepret)
					Singleton.getInstance().var_values.put(node.getVarName(), null);
				else
					Singleton.getInstance().declared_variables.add(node.getVarName());
            } else if (symbol_stack.getSymbol().compareTo(divSign) != 0) {
				stack.push(new VarNode(yytext()));
            } else {
                stack.pop();
                stack.push(new DivNode(stack.pop(), new VarNode(yytext(), Singleton.count), Singleton.count));
            }
    } else {
        stack.push(new VarNode(yytext()));
    }
          }
        case 20: break;
        case 5: 
          { Expression expr = build();
    if (expr instanceof Symbol) {
		Symbol symbol = (Symbol) expr;
        if (symbol.getSymbol().compareTo(mainNode) != 0) {
            stack.push(expr);
        } else {
            stack.pop();
            stack.push(new MainNode (new SequenceNode()));
        }
    } else {
        stack.push(expr);
    }
          }
        case 21: break;
        case 8: 
          { stack.push(new BlockNode());
          }
        case 22: break;
        case 6: 
          { Singleton.count++;
          }
        case 23: break;
        case 11: 
          { Expression expression = null, anotherExpression = null;
		while (!checkCondition(stack.peek())) {
			
			if (stack.peek() instanceof Symbol) {
                Symbol symbol = (Symbol) stack.peek();
				if (symbol.getSymbol().compareTo(plusSign) == 0) {
					stack.pop();
					if (expression instanceof PlusNode) {
						PlusNode node = (PlusNode) expression;
						PlusNode temp = new PlusNode (node.getFirstChild(), Singleton.count);
						node.setFirstChild(temp);
						expression = node;
					}
					else if (expression instanceof GreaterNode) {
							GreaterNode node = (GreaterNode) expression;
							if(node.getFirstChild() instanceof PlusNode) {
								PlusNode temp = (PlusNode) node.getFirstChild();
								PlusNode aux = new PlusNode(temp.getFirstChild(), Singleton.count);
								temp.setFirstChild(aux);
								node.setFirstChild(temp);
								expression = node;
							} else {
								PlusNode temp = new PlusNode(node.getFirstChild(), Singleton.count);
								node.setFirstChild(temp);
								expression = node;
							}
					} else {
						expression = new PlusNode(expression, Singleton.count);
					}
				} else if (symbol.getSymbol().compareTo(greaterSign) == 0) {
					stack.pop();
					if (stack.peek() instanceof VarNode && expression instanceof VarNode) {
						VarNode first = (VarNode) stack.peek();
						VarNode second = (VarNode) expression;
						first.setLine(Singleton.count);
						second.setLine(Singleton.count);
						expression = new GreaterNode(first, second);
					} else if (stack.peek() instanceof VarNode) {
						VarNode first = (VarNode) stack.peek();
						first.setLine(Singleton.count);
						expression = new GreaterNode(first, expression);
					} else if (expression instanceof VarNode) {
						VarNode second = (VarNode) expression;
						second.setLine(Singleton.count);
						expression = new GreaterNode(stack.peek(), second);
					} else {
						expression = new GreaterNode(stack.peek(), expression);
					}
					stack.pop();
				} 
				else if (symbol.getSymbol().compareTo(andSign) == 0) {
					stack.pop();
					if (anotherExpression instanceof AndNode) {
						AndNode node = (AndNode) anotherExpression;
						node.setFirstChild(new AndNode(expression));
						anotherExpression = node;
						expression = null;
					}
					else {
						anotherExpression = new AndNode(expression);
						expression = null;
					}
				}
			}
			else if (expression instanceof PlusNode) {
				PlusNode node = (PlusNode) expression;
            	node.setFirstChild(stack.peek());
            	stack.pop();
            	expression = node;
            }
			else if (expression instanceof GreaterNode) {
				GreaterNode node = (GreaterNode) expression;
				if (node.getFirstChild() instanceof PlusNode) {
					PlusNode temp = (PlusNode) node.getFirstChild();
					temp.setFirstChild(stack.pop());
					node.setFirstChild(temp);
					expression = node;
                }
			}
			else {
				expression = stack.peek();
				stack.pop();
            }
		}
		stack.pop();
		if (anotherExpression instanceof AndNode) {
			AndNode node = (AndNode) anotherExpression;
			node.setFirstChild(expression);
			expression = node;
		}	
		expression = new BracketNode(expression);
		if (stack.peek() instanceof Symbol) {
			Symbol symbol = (Symbol) stack.peek();
			if (symbol.getSymbol().compareTo(ifStatement) == 0) {
				stack.pop();
				expression = new IfNode(expression);	
			} 
			else if (symbol.getSymbol().compareTo(notSign) == 0) {
				stack.pop();
				expression = new NotNode(expression);	
			} 
			else if (symbol.getSymbol().compareTo(whileStatement) == 0)  {
				stack.pop();				
				expression = new WhileNode(expression);	
			} 
			else if (symbol.getSymbol().compareTo(divSign) == 0)  {
				stack.pop();
				expression = new DivNode(stack.peek(), expression, Singleton.count);
				stack.pop();
			} 
		}
		stack.push(expression);
          }
        case 24: break;
        case 9: 
          { Expression expression = stack.pop();
	if (!(expression instanceof BlockNode)) {
		for (;;) {
			if (stack.peek() instanceof BlockNode)
				break;
			if(stack.peek() instanceof SequenceNode) {
            	SequenceNode node = (SequenceNode) stack.pop();
                node.setSecondStatement(expression);
                expression = node;
            }
		}
		expression = new BlockNode(expression);
		stack.pop();
	}
	if (stack.peek() instanceof IfNode) {
        IfNode node = (IfNode) stack.pop();
        node.setThenBlock(expression);
        expression = node;
		stack.push(expression);
	} else if (stack.peek() instanceof Symbol)  {
		Symbol symbol = (Symbol) stack.peek();	
			if(symbol.getSymbol().compareTo(elseStatement) == 0) {
				stack.pop();
				System.out.println(stack.peek().show());
				if (stack.peek() instanceof IfNode) {
					IfNode node = (IfNode) stack.pop();
					node.setElseBlock(expression);
					expression = node;
					if(stack.peek() instanceof SequenceNode || stack.peek() instanceof BlockNode) {
						stack.push(expression);	
					} else if (stack.peek() instanceof MainNode) {
						stack.push(new SequenceNode(expression));
					} else { 
						stack.push(new SequenceNode(stack.pop()));
						stack.push(expression);
					}
				} else if (stack.peek() instanceof BracketNode) {
					BracketNode node = (BracketNode) stack.pop();
					node.setChild(expression);
					expression = node;
					System.out.println(stack.peek().show());
					if(stack.peek() instanceof SequenceNode || stack.peek() instanceof BlockNode || stack.peek() instanceof PlusNode) {
						stack.push(expression);	
					} else if (stack.peek() instanceof MainNode) {
						stack.push(new SequenceNode(expression));
					} else { 
						stack.push(new SequenceNode(stack.pop()));
						stack.push(expression);
					}
				}
			}
	} else if (stack.peek() instanceof WhileNode) {
            WhileNode node = (WhileNode) stack.pop();
            node.setBody(expression);
            expression = node;
			if (stack.peek() instanceof SequenceNode || stack.peek() instanceof BlockNode) {
				stack.push(expression);	
			} else if (stack.peek() instanceof MainNode) {
				stack.push(new SequenceNode(expression));
			} else { 
				stack.push(new SequenceNode(stack.pop()));
				stack.push(expression);
			}
		}
          }
        case 25: break;
        case 1: 
          { 
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
